/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface ToggleButton {
        /**
          * A custom class to be applied to the button element. This allows users to add their own CSS styles to customize the button's appearance. Example: "my-custom-toggle-button"
         */
        "buttonClass": string;
        /**
          * A CSS selector string for the container element that holds the target to be toggled. - If prefixed with `#`, it will be treated as an ID selector. - If prefixed with `.`, it will be treated as a class selector. - If no prefix is provided, it will first try to match an element by ID, and if none is found, it will attempt to match a class name.  Default: ".search-container"  Example: ".result-container", "#myContainer", "container"
         */
        "containerSelector": string;
        /**
          * Sets the icon to be displayed inside the button. - The icon can be any string, emoji, or character entity. - If provided as a URL (starting with `http://`, `https://`, `./`, or `../`), the button will fetch and display the SVG from that location. - If the icon is a stringified SVG (starts with `<svg`), it will be directly rendered within the button. Example: "▼", "►", `<svg ...>`, or a URL like "https://example.com/icon.svg"
         */
        "icon": string;
        /**
          * Defines the initial open state of the button and the target element. If true, the button and target element will be rendered with the "open" class. Example: true or false
         */
        "isOpen": boolean;
        /**
          * Sets the accessible label for the button. This label is used for screen readers to describe the button's purpose. Example: "Toggle Details"
         */
        "label": string;
        /**
          * A CSS selector string for the target element within the container that will be toggled. - If prefixed with `#`, it will be treated as an ID selector. - If prefixed with `.`, it will be treated as a class selector. - If no prefix is provided, it will first try to match an element by ID within the container, and if none is found, it will attempt to match a class name.  When the button is clicked, the "open" class will be toggled on this target element.  Example: ".detail-wrapper", "#details", "detailWrapper"
         */
        "targetSelector": string;
    }
}
declare global {
    interface HTMLToggleButtonElement extends Components.ToggleButton, HTMLStencilElement {
    }
    var HTMLToggleButtonElement: {
        prototype: HTMLToggleButtonElement;
        new (): HTMLToggleButtonElement;
    };
    interface HTMLElementTagNameMap {
        "toggle-button": HTMLToggleButtonElement;
    }
}
declare namespace LocalJSX {
    interface ToggleButton {
        /**
          * A custom class to be applied to the button element. This allows users to add their own CSS styles to customize the button's appearance. Example: "my-custom-toggle-button"
         */
        "buttonClass"?: string;
        /**
          * A CSS selector string for the container element that holds the target to be toggled. - If prefixed with `#`, it will be treated as an ID selector. - If prefixed with `.`, it will be treated as a class selector. - If no prefix is provided, it will first try to match an element by ID, and if none is found, it will attempt to match a class name.  Default: ".search-container"  Example: ".result-container", "#myContainer", "container"
         */
        "containerSelector": string;
        /**
          * Sets the icon to be displayed inside the button. - The icon can be any string, emoji, or character entity. - If provided as a URL (starting with `http://`, `https://`, `./`, or `../`), the button will fetch and display the SVG from that location. - If the icon is a stringified SVG (starts with `<svg`), it will be directly rendered within the button. Example: "▼", "►", `<svg ...>`, or a URL like "https://example.com/icon.svg"
         */
        "icon": string;
        /**
          * Defines the initial open state of the button and the target element. If true, the button and target element will be rendered with the "open" class. Example: true or false
         */
        "isOpen"?: boolean;
        /**
          * Sets the accessible label for the button. This label is used for screen readers to describe the button's purpose. Example: "Toggle Details"
         */
        "label"?: string;
        /**
          * A CSS selector string for the target element within the container that will be toggled. - If prefixed with `#`, it will be treated as an ID selector. - If prefixed with `.`, it will be treated as a class selector. - If no prefix is provided, it will first try to match an element by ID within the container, and if none is found, it will attempt to match a class name.  When the button is clicked, the "open" class will be toggled on this target element.  Example: ".detail-wrapper", "#details", "detailWrapper"
         */
        "targetSelector": string;
    }
    interface IntrinsicElements {
        "toggle-button": ToggleButton;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "toggle-button": LocalJSX.ToggleButton & JSXBase.HTMLAttributes<HTMLToggleButtonElement>;
        }
    }
}
