/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface CoveoMap {
        /**
          * Controls whether the map automatically pans to the info window.
         */
        "disableInfoWindowAutoPan": boolean;
        /**
          * A list of non-default fields to include in the query results. Specify the property as an array using a JSON string representation:   <coveo-map fields-to-include='["fieldA", "fieldB"]'></coveo-map>
         */
        "fieldsToInclude": string[] | string;
        /**
          * Defines how the map handles gestures like zooming and panning.  Type: "none" | "greedy" | "cooperative" | "auto"
         */
        "gestureHandling": "none" | "greedy" | "cooperative" | "auto";
        /**
          * A valid Google API key to be used for rendering the Google Map.
         */
        "googleApiKey": string;
        /**
          * The SVG icon used for the custom pin icon's hover state, replacing the `pinIcon` content on `mouseenter`.  - Use a value that starts with `http://`, `https://`, `./`, or `../` to fetch and display the icon from an external location. - Use a stringified SVG to render it directly.  Note: This icon will only be rendered if `pinIcon` is also set.
         */
        "hoverPinIcon": string;
        /**
          * Sets the maximum width of the InfoWindow.
         */
        "infoWindowMaxWidth": number;
        /**
          * A URL pointing to a template file for customizing the content of the info window.  - Use a value that starts with `http://`, `https://`, `./`, or `../` to fetch the template from a given location. - The template can contain placeholders in the format `{{field}}`, which will be replaced with corresponding data values from the `result.raw` array . - Conditional blocks can be included using `{{#if field}}...{{/if}}` to render content only if the field is present.  Example: <div class="title">{{title}}
         */
        "infoWindowTemplateUrl": string;
        /**
          * Allows the user to set the initial zoom level of the map.
         */
        "initialZoom": number;
        /**
          * Specifies the name of the field that contains the latitude value.
         */
        "latitudeField": string;
        /**
          * Specifies the name of the field that contains the longitude value.
         */
        "longitudeField": string;
        /**
          * Allows the user to set the initial center of the map.  Expect a JSON string for { lat: number, lng: number }  Default: { lat: 0, lng: 0 }
         */
        "mapCenter": string;
        /**
          * Allows the user to specify a Google Maps Map ID for custom map styling.
         */
        "mapId": string;
        /**
          * Sets teh maximum zoom level. Default: 15
         */
        "maxZoom": number;
        /**
          * Sets the minimum zoom level. Default: 2
         */
        "minZoom": number;
        /**
          * The SVG icon to use for a custom pin icon.  - Use a value that starts with `http://`, `https://`, `./`, or `../` to fetch and display an icon from a given location. - Use a stringified SVG to display it directly.
         */
        "pinIcon": string;
        /**
          * Enables or disables zooming via the scroll wheel.
         */
        "scrollwheel": boolean;
        /**
          * Controls whether the Street View control is visible.
         */
        "streetViewControl": boolean;
        /**
          * Allows users to enable or disable the zoom control.
         */
        "zoomControl": boolean;
    }
}
declare global {
    interface HTMLCoveoMapElement extends Components.CoveoMap, HTMLStencilElement {
    }
    var HTMLCoveoMapElement: {
        prototype: HTMLCoveoMapElement;
        new (): HTMLCoveoMapElement;
    };
    interface HTMLElementTagNameMap {
        "coveo-map": HTMLCoveoMapElement;
    }
}
declare namespace LocalJSX {
    interface CoveoMap {
        /**
          * Controls whether the map automatically pans to the info window.
         */
        "disableInfoWindowAutoPan"?: boolean;
        /**
          * A list of non-default fields to include in the query results. Specify the property as an array using a JSON string representation:   <coveo-map fields-to-include='["fieldA", "fieldB"]'></coveo-map>
         */
        "fieldsToInclude"?: string[] | string;
        /**
          * Defines how the map handles gestures like zooming and panning.  Type: "none" | "greedy" | "cooperative" | "auto"
         */
        "gestureHandling"?: "none" | "greedy" | "cooperative" | "auto";
        /**
          * A valid Google API key to be used for rendering the Google Map.
         */
        "googleApiKey": string;
        /**
          * The SVG icon used for the custom pin icon's hover state, replacing the `pinIcon` content on `mouseenter`.  - Use a value that starts with `http://`, `https://`, `./`, or `../` to fetch and display the icon from an external location. - Use a stringified SVG to render it directly.  Note: This icon will only be rendered if `pinIcon` is also set.
         */
        "hoverPinIcon"?: string;
        /**
          * Sets the maximum width of the InfoWindow.
         */
        "infoWindowMaxWidth"?: number;
        /**
          * A URL pointing to a template file for customizing the content of the info window.  - Use a value that starts with `http://`, `https://`, `./`, or `../` to fetch the template from a given location. - The template can contain placeholders in the format `{{field}}`, which will be replaced with corresponding data values from the `result.raw` array . - Conditional blocks can be included using `{{#if field}}...{{/if}}` to render content only if the field is present.  Example: <div class="title">{{title}}
         */
        "infoWindowTemplateUrl"?: string;
        /**
          * Allows the user to set the initial zoom level of the map.
         */
        "initialZoom"?: number;
        /**
          * Specifies the name of the field that contains the latitude value.
         */
        "latitudeField": string;
        /**
          * Specifies the name of the field that contains the longitude value.
         */
        "longitudeField": string;
        /**
          * Allows the user to set the initial center of the map.  Expect a JSON string for { lat: number, lng: number }  Default: { lat: 0, lng: 0 }
         */
        "mapCenter"?: string;
        /**
          * Allows the user to specify a Google Maps Map ID for custom map styling.
         */
        "mapId"?: string;
        /**
          * Sets teh maximum zoom level. Default: 15
         */
        "maxZoom"?: number;
        /**
          * Sets the minimum zoom level. Default: 2
         */
        "minZoom"?: number;
        /**
          * The SVG icon to use for a custom pin icon.  - Use a value that starts with `http://`, `https://`, `./`, or `../` to fetch and display an icon from a given location. - Use a stringified SVG to display it directly.
         */
        "pinIcon"?: string;
        /**
          * Enables or disables zooming via the scroll wheel.
         */
        "scrollwheel"?: boolean;
        /**
          * Controls whether the Street View control is visible.
         */
        "streetViewControl"?: boolean;
        /**
          * Allows users to enable or disable the zoom control.
         */
        "zoomControl"?: boolean;
    }
    interface IntrinsicElements {
        "coveo-map": CoveoMap;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "coveo-map": LocalJSX.CoveoMap & JSXBase.HTMLAttributes<HTMLCoveoMapElement>;
        }
    }
}
